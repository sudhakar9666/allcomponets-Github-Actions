name: Full Python App CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
#this is matrix build will sue multiple version fo the packages##
  # build-and-scan:
  #   name: Build, Scan & Test
  #   runs-on: Ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.11, 3.10]
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Cache pip dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-

  build-and-scan:
    name: Build, Scan & Test
    runs-on: ubuntu-latest   # or use 'ubuntu-latest' for GitHub-hosted runners
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
         path: ~/.cache/pip
         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
         restore-keys: |
           ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Run tests
      #   run: |
      #     python -m unittest discover tests
          
      # - name: Run scan (optional)
      #   run: |
      #     # Replace this with your scan command
      #     echo "Running security/code scan..."

      - name: Login to AWS ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Docker Image
        run: docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Trivy Security Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
         args: >
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.organization=sudhakar9666
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-info
          path: image-info.txt

  deploy:
    name: Deploy to EC2 (Manual Approval)
    needs: build-and-scan
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:

      - name: Deploy Docker Image to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to ECR using the IAM role of EC2
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
             # Pull & run your app
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker stop my-python-app || true
            docker rm my-python-app || true
            docker run -d --name my-python-app -p 80:5000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}


  ## Slack notification on SUCCESS
      # - name: Slack Notification (Success)
      #   if: success()
      #   uses: slackapi/slack-github-action@v2.1.1
      #   with:
      #     method: chat.postMessage
      #     token: ${{ secrets.SLACK_BOT_TOKEN }}
      #     payload: |
      #       channel: ${{ secrets.SLACK_CHANNEL_ID }}
      #       text: "✅ Deployment completed successfully on *${{ env.IMAGE_TAG }}*!"
      #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      #     slack-message: "✅ Deployment completed successfully on ${{ env.IMAGE_TAG }}!"


      # Slack notification on FAILURE
      # - name: Slack Notification (Failure)
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      #     slack-message: "❌ Deployment failed on ${{ env.IMAGE_TAG }}!"
      #     bot-token: ${{ secrets.SLACK_BOT_TOKEN }}

      
